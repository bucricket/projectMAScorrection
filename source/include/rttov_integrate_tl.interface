Interface
Subroutine rttov_integrate_tl( &
   addcosmic, opts, maxnstreams, chanprof,      &! in
   emissivity, emissivity_tl,    &! in
   reflectance, reflectance_tl,    &! in
   refl_norm,        &! in
   thermrefl, thermrefl_tl,  &! in
   do_lambertian,    &! in
   thermal,          &! in
   dothermal,        &! in
   solar,            &! in
   dosolar,          &! in
   solar_spectrum,   &! in
   transmission_aux, transmission_aux_tl,  &! in
   transmission_scatt_ir, transmission_scatt_ir_tl,&
   profiles, profiles_tl, &! in
   profiles_dry, profiles_dry_tl, &! in
   aux_prof, aux_prof_tl,      &! in
   coef,     &! in
   raytracing, raytracing_tl,    &! in
   ircld, ircld_tl,         &! in
   rad , &! in
   auxrad ,          &! in
   auxrad_stream, auxrad_stream_tl, &! in
   rad_tl           ) ! inout
  use rttov_types, Only : rttov_chanprof, rttov_coef, rttov_options, profile_type, profile_aux, &
       transmission_type_aux, transmission_scatt_ir_type, radiance_type, ircld_type, raytracing_type, &
       radiance_aux, rttov_emissivity, rttov_reflectance
  use parkind1, Only : jpim, jprb, jplm
  Implicit None
  logical(jplm),   intent(in)                      :: addcosmic   ! switch for adding cosmic background
  type(rttov_options),  intent(in)                 :: opts        ! options structure
  integer(jpim),   intent(in)                      :: maxnstreams                !
  type(rttov_chanprof), intent(in)                 :: chanprof(:)     ! Channel indices
  type(profile_type),   intent(in)                 :: profiles(:)     ! Profiles
  type(profile_type),   intent(in)                 :: profiles_dry(size(profiles)) ! Gas profiles (ppmv dry)
  type(rttov_emissivity),  intent(in), optional    :: emissivity(size(chanprof))   ! surface emissivity
  type(rttov_reflectance), intent(in), optional    :: reflectance(size(chanprof))  ! surface solar reflectance
  real(jprb),      intent(in)                      :: refl_norm(size(chanprof))
  real(jprb),      intent(in)                      :: thermrefl(size(chanprof))    ! surface thermal reflectance
  logical(jplm),   intent(in)                      :: do_lambertian(:)
  logical(jplm),   intent(in)                      :: thermal(size(chanprof))
  logical(jplm),   intent(in)                      :: dothermal
  logical(jplm),   intent(in)                      :: solar(size(chanprof))
  logical(jplm),   intent(in)                      :: dosolar
  real(jprb),      intent(in)                      :: solar_spectrum(size(chanprof))
  type(ircld_type),     intent(in)                 :: ircld
  type(raytracing_type),intent(in)                 :: raytracing
  type(transmission_type_aux), intent(in)          :: transmission_aux            ! transmittances and single-layer od
  type(transmission_scatt_ir_type), intent(in)     :: transmission_scatt_ir
  type(profile_aux) ,   intent(in)                 :: aux_prof ! auxillary profiles info.
  type(rttov_coef),     intent(in)                 :: coef
  type(radiance_aux),   intent(in)                 :: auxrad_stream
  type(radiance_type),  intent(in)                 :: rad    ! radiances (mw/cm-1/ster/sq.m) and BTs
  type(radiance_aux),   intent(in)                 :: auxrad ! auxillary radiances
  Type(rttov_emissivity),  Intent(inout), Optional :: emissivity_tl(size(chanprof))
  Type(rttov_reflectance), Intent(inout), Optional :: reflectance_tl(size(chanprof))
  Real(jprb),              Intent(in)              :: thermrefl_tl(size(chanprof))
  Type(profile_Type),      Intent(in)              :: profiles_tl(size(profiles))
  Type(profile_Type),      Intent(in)              :: profiles_dry_tl(size(profiles))
  Type(ircld_type),        Intent(in)              :: ircld_tl
  Type(raytracing_type),   Intent(in)              :: raytracing_tl
  Type(transmission_Type_aux), Intent(in)          :: transmission_aux_tl
  type(transmission_scatt_ir_type) ,intent(in)     :: transmission_scatt_ir_tl
  Type(profile_aux) ,  Intent(in)                  :: aux_prof_tl
  Type(radiance_Type), Intent(inout)               :: rad_tl ! in because of mem allocation
  Type(radiance_aux),  Intent(inout)               :: auxrad_stream_tl
End Subroutine
End Interface
